<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_snc_slack_points_slack_event</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Process Points Command</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	// TODO: Move this logic into a Script Include
	var payloadObject = JSON.parse(current.payload); 
	
	var slashToken = gs.getProperty('x_snc_slack_points.slash_command_token');
// 	if(slashToken !== payloadObject.token[0]) {
// 		gs.info("slashToken "+slashToken+"!="+payloadObject.token[0]);
// 		return;
// 	}
	
	var recipients = {};
	var sanitizedText = payloadObject.text[0];
	if(!payloadObject.user_mentions)
		return;
	
	for(var ri = 0; ri < payloadObject.user_mentions.length; ri++)
	{
		var recipientName = payloadObject.user_mentions[ri];
		var recipientId = payloadObject.user_mentions_ids[ri];
		recipients[recipientName] = recipientId;
		sanitizedText = sanitizedText.replace(new RegExp("@"+recipientName,'g'),"@"+recipientId);
	}

	var kudosMessage = payloadObject.text[0]
		.replace(/@all/g,"")
		.replace(/@here/g, "")
		.replace(/@channel/g,"")
		.replace(/\s+/g, " ");
	var messages = ["@"+payloadObject.user_name[0]+" says 'kudos "+kudosMessage+"'"];


	Object.keys(recipients).forEach(function (recipient) {
		// Check for self-points
		//if (recipient.contains(payloadObject.user_name[0])) {
		if (payloadObject.user_id[0] == recipients[recipient]) {
			// TODO: make the denial message an ephemeral message to the user
			// TODO: remove that part of the points allocation from the "kudos" message
			//       e.g. /kudos @me @someoneelse good job => /kudos @someoneelse good job
			var denials = ["you can pat yourself on the back, but no self-points are allowed.", 
						   "I can't give you a real point but... you tried?",
						   "you think you're real clever don't you.",
						   "all I can offer you is some sassy reply.",
						   "that's cute how you tried to give yourself a point.",
						   "no self-poiints.",
						   "you tried ¯\\_(ツ)_/¯"];
			messages.push("*@"+recipient + " " + denials[Math.floor(Math.random() * denials.length)]+"*");
		} else {
			var grSlackUser = new GlideRecord('x_snc_slack_points_slack_user'); 
			grSlackUser.addQuery('user_id', recipients[recipient]); 
			grSlackUser.query(); 

			if (grSlackUser.next()) {
				grSlackUser.points = grSlackUser.points + 1;  
				grSlackUser.update(); 
			} else {
				grSlackUser.initialize(); 
				grSlackUser.user_id = recipients[recipient]; 
				grSlackUser.user_name = recipient;
				grSlackUser.points = 1; 
				grSlackUser.insert(); 
			}
			
			var grPointRecord = new GlideRecord('x_snc_slack_points_point');
			grPointRecord.initialize();
			grPointRecord.setValue('giver', payloadObject.user_id[0]);
			grPointRecord.setValue('target', grSlackUser.getUniqueValue());
			grPointRecord.setValue('source_event', current.getUniqueValue());
			grPointRecord.setValue('text', sanitizedText);
			grPointRecord.insert();

			var count = new GlideAggregate('x_snc_slack_points_point');
			count.addQuery('target', grSlackUser.getUniqueValue());
			count.addEncodedQuery('sys_created_onONLast 90 days@javascript:gs.beginningOfLast90Days()@javascript:gs.endOfLast90Days()');
			count.addAggregate('COUNT');
			count.query();
			var score = 0;
			if(count.next()) 
				score = count.getAggregate('COUNT');

			var rank = '';
			var leader = new GlideAggregate('x_snc_slack_points_point');
			leader.addEncodedQuery('sys_created_onONLast 90 days@javascript:gs.beginningOfLast90Days()@javascript:gs.endOfLast90Days()');
			leader.orderByAggregate('COUNT', 'target');
			leader.addAggregate('COUNT', 'target');
			leader.query();
			var this_rank = 0;
			while (leader.next()){
				this_rank++;
				if (leader.target == grSlackUser.getUniqueValue()) rank = this_rank;
			}

			var randomMessage = new x_snc_slack_points.RandomMessage();
			var message = "*"+randomMessage.getMessage("@"+recipient, score, grSlackUser.points, rank)+"*";

			messages.push(message);
		}
	}); 

	if(payloadObject.response_url){
		var response = new MatterMostClient().sendResponseChat(payloadObject.response_url, messages.join('\n\n'));
		var responseBody = response.getBody();
		var statusCode = response.getStatusCode();
	} 
	
	if(payloadObject.context && payloadObject.context.mattermost_site_url){
		gs.info("MM-command:"+payloadObject.context.mattermost_site_url);
		var response = new MatterMostClient().sendChat(
			payloadObject.context.channel.id, 
			messages.join('\n\n'),
			"",
			payloadObject.context.mattermost_site_url,
			payloadObject.context.bot_access_token
		);
		var responseBody = response.getBody();
		gs.info("MM-Command response:"+JSON.stringify(responseBody));
		var statusCode = response.getStatusCode();
		gs.info("MM-Command responsecode:"+statusCode);

	}
	// var userId = payloadObject.event.text.match(/\s?\@?(\S+)\s?\+\+/)[1]; 

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-08-10 19:28:48</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>ba869a601b551d10d64133b01a4bcb22</sys_id>
        <sys_mod_count>29</sys_mod_count>
        <sys_name>Process Points Command</sys_name>
        <sys_overrides/>
        <sys_package display_value="Slack Points Thing" source="x_snc_slack_points">4f6df3c813444f009718b9b76144b02c</sys_package>
        <sys_policy/>
        <sys_scope display_value="Slack Points Thing">4f6df3c813444f009718b9b76144b02c</sys_scope>
        <sys_update_name>sys_script_ba869a601b551d10d64133b01a4bcb22</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-08-16 19:06:55</sys_updated_on>
        <template/>
        <when>async_always</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=ba869a601b551d10d64133b01a4bcb22"/>
</record_update>
