<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>false</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_snc_slack_points_slack_event</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Leaderboard</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	// TODO: Move this logic into a Script Include
	var payloadObject = JSON.parse(current.payload); 

	// DO NOT process bot messages
	if (payloadObject.event.subtype == 'bot_message') {
		return; 
	}

	var leaderboardMatches = payloadObject.event.text.match(/!leaderboard/gmi); 

	if (leaderboardMatches) {
		var items = [];
		try {
			items.push('Points leaderboard (past 90 days):');
			var count = new GlideAggregate('x_snc_slack_points_point');
			count.addEncodedQuery('sys_created_onONLast 90 days@javascript:gs.beginningOfLast90Days()@javascript:gs.endOfLast90Days()^targetISNOTEMPTY');
			count.orderByAggregate('COUNT', 'target');
			count.addAggregate('COUNT', 'target');
			count.query();
			var rank = 1;
			while (count.next()){
				var item = '';

				if (rank == 1) item = '1. :first_place_medal: ';
				else if (rank == 2) item = '2. :second_place_medal: ';
				else if (rank == 3) item = '3. :third_place_medal: ';
				else if (rank > 3 && rank < 11) item = rank + '. ';
				else if (count.target.user_id.includes(payloadObject.event.user)) item = '...' + rank + '. ';
				else {
					rank++;
					continue;
				}
				rank++;	

				var user_name = count.target.user_name.toString();
				if (user_name == ''){
					var slack = new x_snc_slack_points.SlackClient(); 
					var userInfo = slack.getUserInfo(count.target.user_id.replace('<','').replace('>','').replace('@',''));
					user_name = userInfo.user.name; 
				}
				item += user_name + ' - ';
				item += count.getAggregate('COUNT', 'target') + ' points';
				items.push(item);
			}
		} catch (em){
			/*items.push('```Error:');
			for (var i in em){
				items.push(i + ': ' + em[i]);
			}
			items.push('```');*/
		}

		items.push('');
		items.push('https://devprogramresources.service-now.com/sndevs?id=points_leaderboard');

		var response = new SlackClient().sendChat(payloadObject.event.channel, items.join('\n'), payloadObject.event.thread_ts);
		var responseBody = response.getBody();
		var statusCode = response.getStatusCode();		
	} else {
		var pointsMatches = payloadObject.event.text.match(/!points/gmi);
		if (pointsMatches){
			var me = new GlideAggregate('x_snc_slack_points_point');
			me.addEncodedQuery('sys_created_onONLast 12 months@javascript:gs.beginningOfLast12Months()@javascript:gs.endOfLast12Months()^target.user_idLIKE' + payloadObject.event.user);
			me.addAggregate('COUNT', 'target');
			me.query();
			if (me.next()){
				var message = 'You have received ' + me.getAggregate('COUNT', 'target') + ' in the past 90 days.';
				var meUser = new GlideRecord('x_snc_slack_points_slack_user');
				meUser.addEncodedQuery('user_idLIKE' + payloadObject.event.user);
				meUser.orderByDesc('points');
				meUser.setLimit(1);
				meUser.query();
				if (meUser.next()) message += ' ' + meUser.getValue('points') + ' total points.';
				var me_response = new SlackClient().sendChat(payloadObject.event.channel, message, payloadObject.event.thread_ts);	
			}
		}
	}

	// var userId = payloadObject.event.text.match(/\s?\@?(\S+)\s?\+\+/)[1]; 

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>earl.duque</sys_created_by>
        <sys_created_on>2020-01-06 23:06:04</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>640f867fdb8e48508966ff561d961993</sys_id>
        <sys_mod_count>33</sys_mod_count>
        <sys_name>Leaderboard</sys_name>
        <sys_overrides/>
        <sys_package display_value="Slack Points Thing" source="x_snc_slack_points">4f6df3c813444f009718b9b76144b02c</sys_package>
        <sys_policy/>
        <sys_scope display_value="Slack Points Thing">4f6df3c813444f009718b9b76144b02c</sys_scope>
        <sys_update_name>sys_script_640f867fdb8e48508966ff561d961993</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-08-18 00:25:12</sys_updated_on>
        <template/>
        <when>async_always</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=640f867fdb8e48508966ff561d961993"/>
</record_update>
